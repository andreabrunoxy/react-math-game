{"version":3,"sources":["components/ProgressBar.js","App.js","reportWebVitals.js","index.js"],"names":["ProgressBar","props","className","style","transform","score","App","useState","setScore","mistakes","setMistakes","generateProblem","currentProblem","setCurrentProblem","userAnswer","setUserAnswer","showError","setShowError","answerField","useRef","resetButton","generateNumber","max","Math","floor","random","numberOne","numberTwo","operator","useEffect","setTimeout","current","focus","onSubmit","e","correctAnswer","preventDefault","parseInt","prev","action","ref","value","onChange","target","type","autoComplete","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5145c9af.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction ProgressBar(props) {\r\n  return (\r\n    <>\r\n      <div className=\"progress\">\r\n        <div className=\"boxes\">\r\n          <div className=\"box\"></div>\r\n          <div className=\"box\"></div>\r\n          <div className=\"box\"></div>\r\n          <div className=\"box\"></div>\r\n          <div className=\"box\"></div>\r\n          <div className=\"box\"></div>\r\n          <div className=\"box\"></div>\r\n          <div className=\"box\"></div>\r\n          <div className=\"box\"></div>\r\n          <div className=\"box\"></div>\r\n        </div>\r\n        <div className=\"progress-inner\" style={{ transform: `scaleX(${props.score / 10})` }}></div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProgressBar;\r\n","import \"./App.css\";\nimport ProgressBar from \"./components/ProgressBar\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [mistakes, setMistakes] = useState(0);\n  const [currentProblem, setCurrentProblem] = useState(generateProblem());\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const answerField = useRef(null);\n  const resetButton = useRef(null);\n\n  useEffect(() => {\n    if (score == 10 || mistakes == 3) {\n      setTimeout(() => resetButton.current.focus(), 331);\n    }\n  }, [score, mistakes]);\n\n  function generateNumber(max) {\n    return Math.floor(Math.random() * (max + 1));\n  }\n\n  function generateProblem() {\n    return {\n      numberOne: generateNumber(10),\n      numberTwo: generateNumber(10),\n      operator: [\"+\", \"-\", \"x\"][generateNumber(2)]\n    };\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    answerField.current.focus();\n\n    let correctAnswer;\n    if (currentProblem.operator == \"+\") correctAnswer = currentProblem.numberOne + currentProblem.numberTwo;\n    if (currentProblem.operator == \"-\") correctAnswer = currentProblem.numberOne - currentProblem.numberTwo;\n    if (currentProblem.operator == \"x\") correctAnswer = currentProblem.numberOne * currentProblem.numberTwo;\n\n    if (correctAnswer == parseInt(userAnswer, 10)) {\n      setScore(prev => prev + 1);\n      setCurrentProblem(generateProblem());\n      setUserAnswer(\"\");\n    } else {\n      setMistakes(prev => prev + 1);\n      setShowError(true);\n      setTimeout(() => setShowError(false), 401);\n    }\n  }\n\n  function resetGame() {\n    setScore(0);\n    setMistakes(0);\n    setUserAnswer(\"\");\n    setCurrentProblem(generateProblem());\n  }\n\n  return (\n    <>\n      <div className={\"main-ui\" + (mistakes == 3 || score == 10 ? \" blurred\" : \"\")}>\n        <p className={\"problem\" + (showError ? \" animate-wrong\" : \"\")}>\n          {currentProblem.numberOne} {currentProblem.operator} {currentProblem.numberTwo}\n        </p>\n\n        <form onSubmit={handleSubmit} action=\"\" className=\"our-form\">\n          <input ref={answerField} value={userAnswer} onChange={e => setUserAnswer(e.target.value)} type=\"text\" className=\"our-field\" autoComplete=\"off\" />\n          <button>Submit</button>\n        </form>\n\n        <p className=\"status\">\n          You need {score} more points, and are allowed to make {2 - mistakes} more mistakes.\n        </p>\n        <ProgressBar score={score} />\n      </div>\n\n      <div className={\"overlay\" + (mistakes == 3 || score == 10 ? \" overlay--visible\" : \"\")}>\n        <div className=\"overlay-inner\">\n          <p className=\"end-message\">{score == 10 ? \"Congrats, you won!\" : \"Sorry, you lost!\"}</p>\n          <button ref={resetButton} onClick={resetGame} className=\"reset-button\">\n            Start Over\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}